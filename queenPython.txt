BOARD_SIZE = int(input("Board size: ")) * 2 # Change this to input
EMPTY = 999 # Indicates no queen
# Every other row is just for display
board = [[None for i in range(BOARD_SIZE)] for i in range(BOARD_SIZE)]
locations = [EMPTY for i in range(int(BOARD_SIZE * 0.5))]
NUM_LOCATIONS = len(locations)
solutionCount = 1


# Clears the board
def ClearBoard() -> None:
  for row in range(BOARD_SIZE):
    for column in range(BOARD_SIZE):
      # If the row is odd
      #   it is just for display
      if row % 2 == 1:
        # Odd columns are always in line with '|'
        # Even ones are where 'Q's go
        if column % 2 == 1:
          board[row][column] = "-"
        else:
          board[row][column] = "---"
      else:
        if column % 2 == 1:
          board[row][column] = "|"
        else:
          board[row][column] = "   "


# Displays the board
def DisplayBoard() -> None:
  ClearBoard()
  DrawBoard()
  # Holds each line
  displayBuffer = ""
  for row in range(BOARD_SIZE):
    for column in range(BOARD_SIZE):
      displayBuffer += board[row][column]
    print(displayBuffer)
    displayBuffer = ""


# Adds the queens to the board from the list
def DrawBoard() -> None:
  for i, e in enumerate(locations):
    # The index is the column and
    #  the element is the row
    #  multiply by 2 so it skips display rows/columns
    if e != EMPTY:
      board[e * 2][i * 2] = " Q " 


# Checks diagonals
def CheckDiag(row: int, col: int) -> bool:
  # Works backwards from the initial location
  for i in range(1, col + 1):
    if (locations[col - i] == row - i) or (locations[col - i] == row + i):
      return True
  else:
    return False


# Places all the pieces
def PlacePieces() -> None:
  row = 0
  col = 0
    
  # Will keep looping until the column hits length of locations
  #  which means all the pieces have been placed
  while col < NUM_LOCATIONS:
    # If the row is greater than the board, backtrack
    if row >= NUM_LOCATIONS:
      locations[col] = EMPTY
      col -= 1
      if col < 0:
        return
      row = locations[col]
    else:
      # If there is a queen in that row move on
      if row in locations:
        row += 1
      # If there is a diagonal attach move on
      elif CheckDiag(row, col):
        row += 1
      else:
        locations[col] = row
        col += 1
        row = 0


PlacePieces()
DisplayBoard()
